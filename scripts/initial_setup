#!/bin/bash

# Dotfiles Initial Setup Script for Arch Linux
# Installs paru, required packages, and stows configurations

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Print with colors
print_status() { echo -e "${BLUE}[INFO]${NC} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Check if running on Arch Linux
check_arch() {
    if ! command -v pacman &> /dev/null; then
        print_error "This script is designed for Arch Linux systems only."
        exit 1
    fi
    print_success "Detected Arch Linux system"
}

# Install paru AUR helper
install_paru() {
    if command -v paru &> /dev/null; then
        print_success "Paru already installed"
        return 0
    fi

    print_status "Installing paru AUR helper..."
    
    # Install base-devel if not present
    sudo pacman -S --needed --noconfirm base-devel git
    
    # Clone and build paru
    cd /tmp
    git clone https://aur.archlinux.org/paru.git
    cd paru
    makepkg -si --noconfirm
    cd ~
    
    print_success "Paru installed successfully"
}

# Install packages
install_packages() {
    local packages=(
        "alacritty"     # Terminal emulator
        "starship"      # Shell prompt
        "neovim"        # Text editor  
        "tmux"          # Terminal multiplexer
        "zsh"           # Shell
        "stow"          # Symlink manager
        "fzf"           # Fuzzy finder
        "ripgrep"       # Fast grep
        "fd"            # Fast find
        "git"           # Version control
        "wl-clipboard"  # Wayland clipboard
    )

    print_status "Installing packages: ${packages[*]}"
    
    # Update system first
    sudo pacman -Syu --noconfirm
    
    # Install packages with paru (handles both pacman and AUR)
    for package in "${packages[@]}"; do
        if paru -Q "$package" &> /dev/null; then
            print_success "$package already installed"
        else
            print_status "Installing $package..."
            paru -S --noconfirm "$package"
        fi
    done
    
    print_success "All packages installed"
}

# Set zsh as default shell
setup_zsh() {
    if [[ "$SHELL" == *"zsh"* ]]; then
        print_success "Zsh already set as default shell"
        return 0
    fi

    print_status "Setting zsh as default shell..."
    chsh -s $(which zsh)
    print_success "Zsh set as default shell (requires re-login to take effect)"
}

# Stow configurations
stow_configs() {
    local configs=(
        "alacritty"
        "starship" 
        "nvim"
        "tmux"
        "zsh"
    )

    print_status "Stowing configurations..."
    
    # Navigate to dotfiles directory
    DOTFILES_DIR="$(cd "$(dirname "$0")/.." && pwd)"
    cd "$DOTFILES_DIR"
    
    # Backup existing configs
    backup_dir="$HOME/config-backup-$(date +%Y%m%d-%H%M%S)"
    mkdir -p "$backup_dir"
    
    for config in "${configs[@]}"; do
        if [[ -d "$config" ]]; then
            # Check for existing configs and backup
            case $config in
                "nvim")
                    [[ -d "$HOME/.config/nvim" ]] && mv "$HOME/.config/nvim" "$backup_dir/"
                    ;;
                "tmux")
                    [[ -d "$HOME/.config/tmux" ]] && mv "$HOME/.config/tmux" "$backup_dir/"
                    ;;
                "zsh")
                    [[ -f "$HOME/.zshrc" ]] && mv "$HOME/.zshrc" "$backup_dir/"
                    ;;
                "alacritty")
                    [[ -d "$HOME/.config/alacritty" ]] && mv "$HOME/.config/alacritty" "$backup_dir/"
                    ;;
                "starship")
                    [[ -d "$HOME/.config/starship" ]] && mv "$HOME/.config/starship" "$backup_dir/"
                    ;;
            esac
            
            # Stow the configuration
            print_status "Stowing $config..."
            stow "$config"
            print_success "$config configuration stowed"
        else
            print_warning "$config directory not found, skipping..."
        fi
    done
    
    if [[ -n "$(ls -A "$backup_dir" 2>/dev/null)" ]]; then
        print_success "Existing configurations backed up to: $backup_dir"
    else
        rmdir "$backup_dir"
    fi
}

# Install Neovim plugins
setup_neovim() {
    print_status "Setting up Neovim plugins..."
    
    # Install plugins headlessly
    nvim --headless "+Lazy! install" +qa
    
    print_success "Neovim plugins installed"
}

# Install Zinit (Zsh plugin manager)
setup_zinit() {
    local zinit_dir="$HOME/.local/share/zinit/zinit.git"
    
    if [[ -d "$zinit_dir" ]]; then
        print_success "Zinit already installed"
        return 0
    fi

    print_status "Installing Zinit (Zsh plugin manager)..."
    
    mkdir -p "$HOME/.local/share/zinit"
    git clone https://github.com/zdharma-continuum/zinit.git "$zinit_dir"
    
    print_success "Zinit installed"
}

# Main setup function
main() {
    print_status "Starting dotfiles initial setup for Arch Linux..."
    echo
    
    # Check prerequisites
    check_arch
    
    # Install components
    install_paru
    install_packages
    setup_zsh
    setup_zinit
    
    # Configure dotfiles
    stow_configs
    setup_neovim
    
    echo
    print_success "ðŸŽ‰ Setup completed successfully!"
    echo
    print_status "Next steps:"
    echo "  1. Restart your terminal or run 'exec zsh'"
    echo "  2. Open tmux and install plugins: Ctrl+Space + I"
    echo "  3. Enjoy your new development environment!"
    echo
    print_warning "Note: You may need to log out and log back in for shell changes to take effect."
}

# Run main function
main "$@"
